// Variables
$color-primary: #55c57a;
$color-primary-light:  #7ed56f;
$color-primary-dark: #28b485;

$color-dark-grey: #777;
$color-white: #fff;

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  // font-size: 16px;
  line-height: 1.7;
  color: $color-dark-grey;
  padding: 3rem;

  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
    to right bottom,
    rgba($color-primary-light, 0.8),
    rgba($color-primary-dark, 0.8)),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

/* .logo:hover {
  animation: moveInRight 1s ease-out;
} */

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  margin-bottom: 6rem;

  backface-visibility: hidden;
  /*
  backface-visibility - used to fix the "shaky" part of an animation.
  Determines whether or not the 'back' side of a transformed element is visible when facing the viewer.
  With an identity transform, the front side of an element faces the viewer.
  Syntax: visible | hidden
  */
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /*
  animation-iteration-count: 3;
  animation-delay: 3s;
  */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/*
pseudo selectors

Making the visited state look the same as the default link state,
instead of it turning purple after being visited.
*/
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem; /* makes the button rounded */

  transition: all .2s; /* all properties are enabled to be animated - shorthand version */

  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
}

/*
the :active" pseudo-class is for clicking.  So, when you click the styling will be applied.
*/
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 .5rem 1rem rgba(0,0,0,.2);
}

.btn--white {
  background-color: $color-white;
  color: $color-dark-grey;
}

/*
::after pseudo-element
be sure to put it behind the actual button element with absolute positioning, top: 0, and left: 0
*/

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute; /* needs a reference, so we set the position: relative for the actual button element */
  top: 0;
  left: 0;
  z-index: -1; /* z-index defines the position of elements if they overlapping. The lower value will be behind */
  /* we want to animate the btn:hover::after, but we do it on the initial state */
  transition: all .4s;
}

.btn--white::after {
  background-color: $color-white;
}

.btn:hover::after {
  /* transform: scale(1.5); /* "after", is while you're currently hover the element. scale it by factor of 1.5 */
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; /* fades out of the scaled transform since we set opacity to 0, so it will be invisible */
}

/* animated button styling for only while it's animating */

.btn--animated {
  /* values -> name  duration timing-func  delay */
  animation: moveInBottom .5s ease-out .75s;
  animation-fill-mode: backwards; /* apply the styles up to 0% before animation starts */
}
